[{"title":"Java基础语法","url":"/note/ea538f2a.html","content":"Java 基础语法对象与类\n对象：对象是类的一个实例，有状态和行为。\n类：类是一个模板，描述一类对象的行为和状态。\n方法：方法就是行为，一个类可以有很多方法。\n实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。\n\nHelloWorld 示例public class HelloWorld &#123;\n    /* 第一个Java程序\n     * 它将输出字符串 Hello World\n     */\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;Hello World&quot;); // 输出 Hello World\n    &#125;\n&#125;\n\n\npublic：访问修饰符\nstatic：关键字\nvoid：返回类型\nmain：方法名\nString：String类\nargs：字符串数组\n\n基本语法规则\n大小写敏感\n类名：首字母大写，多单词首字母均大写\n方法名：小写字母开头，多单词首字母大写\n源文件名：必须和类名相同\n主方法入口：所有 Java 程序从 public static void main(String[] args) 方法开始执行\n\n标识符规则\n所有标识符都应以字母 (A-Z 或 a-z)、美元符号 $ 或下划线 _ 开始\n首字符之后可以是字母、数字、美元符号 $ 或下划线 _\n关键字不可作为标识符\n标识符大小写敏感\n\n修饰符修饰类、方法或属性\n\n访问控制修饰符：default, public, protected, private\n非访问控制修饰符：final, abstract, static, synchronized\n\n变量类型\n局部变量\n类变量（静态变量）\n成员变量（非静态变量）\n\n数组\n数组是存储在堆上的对象\n\n枚举\n枚举限制变量只能是预先设定好的值\n\n关键字数据类型\n\n\n关键字\n用途\n\n\n\nbyte\n8位整数类型\n\n\nshort\n16位整数类型\n\n\nint\n32位整数类型\n\n\nlong\n64位整数类型\n\n\nfloat\n32位单精度浮点类型\n\n\ndouble\n64位双精度浮点类型\n\n\nchar\n16位字符类型\n\n\nboolean\n布尔类型（true&#x2F;false）\n\n\n流程控制\n\n\n关键字\n用途\n\n\n\nif\n条件语句\n\n\nelse\n条件语句的“否则”分支\n\n\nswitch\n多分支选择\n\n\ncase\nswitch 中的分支\n\n\ndefault\nswitch 中的默认分支\n\n\nfor\n循环语句\n\n\nwhile\n循环语句\n\n\ndo\n循环语句（至少执行一次）\n\n\nbreak\n跳出循环或 switch\n\n\ncontinue\n跳过本次循环，进入下一次循环\n\n\nreturn\n从方法返回值\n\n\n类、对象、方法\n\n\n关键字\n用途\n\n\n\nclass\n定义类\n\n\ninterface\n定义接口\n\n\nextends\n继承类\n\n\nimplements\n实现接口\n\n\nabstract\n抽象类或抽象方法\n\n\nfinal\n常量、不可继承类、不可重写方法\n\n\nstatic\n静态变量、方法\n\n\nthis\n当前对象引用\n\n\nsuper\n父类对象引用\n\n\nnew\n创建对象\n\n\ninstanceof\n类型判断\n\n\n异常处理\n\n\n关键字\n用途\n\n\n\ntry\n异常处理块\n\n\ncatch\n捕获异常\n\n\nfinally\n异常处理后的最终执行块\n\n\nthrow\n抛出异常\n\n\nthrows\n声明方法可能抛出的异常\n\n\n访问控制与修饰符\n\n\n关键字\n用途\n\n\n\npublic\n公共访问权限\n\n\nprotected\n受保护访问权限\n\n\nprivate\n私有访问权限\n\n\ndefault\n默认访问权限（包内访问）\n\n\n其他关键字\n\n\n关键字\n用途\n\n\n\npackage\n声明包\n\n\nimport\n引入类或包\n\n\nenum\n枚举类型\n\n\nassert\n断言\n\n\nnull\n空引用\n\n\ntrue &#x2F; false\n布尔值\n\n\nvolatile\n线程间变量可见性修饰符\n\n\nsynchronized\n同步方法或块\n\n\ntransient\n序列化时忽略字段\n\n\nstrictfp\n精确浮点计算\n\n\nnative\n本地方法修饰符\n\n\n空行\n空白行或者带注释的行，Java 编译器都会忽略\n\n继承\n一个类可以由其他类派生\n利用继承可以重用已存在类的方法和属性，而无需重写\n被继承的类称为 超类（super class）\n派生类称为 子类（sub class）\n\n接口\n对象间相互通信的协议。\n接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。\n\n","categories":["编程"],"tags":["Java"]},{"title":"Linux","url":"/note/53d0684b.html","content":"中文设置vim /etc/locale.confLANG=&quot;zh_CN.utf8&quot;source /etc/locale.conf\n\nMySQL 启动&#x2F;停止&#x2F;重启service mysql startservice mysql stopservice mysql restart\n\ntomcat 停止&#x2F;启动service tomcat stopservice tomcat start\n\n卸载 mcsmanagersystemctl stop mcsm-&#123;daemon,web&#125;.servicesystemctl disable mcsm-&#123;daemon,web&#125;.servicerm -rf /opt/mcsmanager\n\nJava 环境变量# vim /etc/profileexport JAVA_HOME=/usr/java/jdk-22.0.2export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH# . /etc/profile# source /etc/profile# 软连接ln -s /usr/local/jdk-22.0.2/bin/java java\n\ndocker 安装dnf config-manager --add-repo=http://mirrors.tencent.com/docker-ce/linux/centos/docker-ce.repodnf install docker-ce# 启动systemctl start docker# 镜像源# vim /etc/docker/daemon.json&#123;        &quot;registry-mirrors&quot;: [                &quot;https://mirror.ccs.tencentyun.com&quot; ,                &quot;https://docker.mirrors.ustc.edu.cn&quot;        ]&#125;\n\nvaultwarden token 设置docker run -d --name vaultwarden -e ADMIN_TOKEN=&#x27;$argon2id$v=19$m=65540,t=3,p=4$vgIdtZLMBNu3LeiDHArtCJ5GfipwC4enN7XE6CJEBZM$Toxc02nDRpMFSmzc2+JAO6dX+x746NW5BAZ2johQsr8&#x27; -v /vw-data/:/data/ --restart unless-stopped -p 8081:80 vaultwarden/server:latest\n"},{"title":"Magisk 安装","url":"/note/3feb0aba.html","content":"adbadb reboot bootloaderfastboot flash boot 面具文件fastboot reboot\n","categories":["安卓"],"tags":["安卓","magisk","apatch"]},{"title":"Python","url":"/note/a378bd8e.html","content":"pip国内源# 查找配置文件路径 pip config list -v[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com\n\nuv国内源# 环境变量 用户或者系统变量名：UV_DEFAULT_INDEX变量值：https://mirrors.aliyun.com/pypi/simple/\n\nSQLite 基本操作import sqlite3def main():    # 连接到数据库 (如果不存在则创建)    conn = sqlite3.connect(&#x27;mydatabase.db&#x27;)    cursor = conn.cursor()    print(&quot;成功连接到数据库&quot;)    # 创建 &#x27;users&#x27; 表 (如果不存在)    cursor.execute(&#x27;&#x27;&#x27;    CREATE TABLE IF NOT EXISTS users (        id INTEGER PRIMARY KEY AUTOINCREMENT,        name TEXT NOT NULL,        age INTEGER    )    &#x27;&#x27;&#x27;)    conn.commit()    print(&quot;成功创建 &#x27;users&#x27; 表&quot;)    # 插入数据    cursor.execute(&quot;INSERT INTO users (name, age) VALUES (?, ?)&quot;, (&#x27;Alice&#x27;, 30))    users_data = [        (&#x27;Bob&#x27;, 25),        (&#x27;Charlie&#x27;, 35)    ]    cursor.executemany(&quot;INSERT INTO users (name, age) VALUES (?, ?)&quot;, users_data)    conn.commit()    print(&quot;成功插入数据&quot;)    # 查询所有数据    cursor.execute(&quot;SELECT * FROM users&quot;)    rows = cursor.fetchall()    print(&quot;所有用户:&quot;, rows)    # 查询年龄大于 28 的用户    cursor.execute(&quot;SELECT name, age FROM users WHERE age &gt; ?&quot;, (28,))    older_users = cursor.fetchall()    print(&quot;年龄大于 28 的用户:&quot;, older_users)    # 更新 Alice 的年龄    cursor.execute(&quot;UPDATE users SET age = ? WHERE name = ?&quot;, (31, &#x27;Alice&#x27;))    conn.commit()    print(&quot;成功更新 Alice 的年龄&quot;)    # 删除名为 Bob 的用户    cursor.execute(&quot;DELETE FROM users WHERE name = ?&quot;, (&#x27;Bob&#x27;,))    conn.commit()    print(&quot;成功删除 Bob&quot;)    # 再次查询所有数据    cursor.execute(&quot;SELECT * FROM users&quot;)    updated_rows = cursor.fetchall()    print(&quot;更新后的所有用户:&quot;, updated_rows)    # 关闭连接    cursor.close()    conn.close()    print(&quot;已关闭数据库连接&quot;)if __name__ == &quot;__main__&quot;:    main()","categories":["编程"],"tags":["Python"]},{"title":"Rime 输入法","url":"/note/7df1138c.html","content":"RIME | 中州韻輸入法引擎\n白霜词库# rime 用户文件夹git clone --depth 1 https://github.com/gaboolic/rime-frost# 更新git pull\n\n主题配色mac:    author: &#x27;lamb&#x27;    name: &#x27;lamb&#x27;    back_color: 0xffffff    corner_radius: 5    border_height: 4    dborder_width: 4    border_color: 0xe0e0e0    border_color_width: 0    candidate_format: &#x27;%c %@  &#x27;    candidate_text_color: 0x333333    font_face: PingFangSC    font_point: 16    text_color: 0x333333    hilited_candidate_label_color: 0xffffff    hilited_text_color: 0xffffff    hilited_candidate_back_color: 0xD05B21    hilited_corner_radius: 5    horizontal: true    inline_preedit: true    label_color: 0x888888    label_font_point: 12\n","tags":["输入法"]},{"title":"Ubuntu","url":"/note/7be7930f.html","content":"下载Ubuntu\n静态IPcd /etc/netplan/sudo vim 50-cloud-init.yamlnetwork:    renderer: networkd    ethernets:        enp6s18:            dhcp4: false            addresses: [10.10.10.12/24]            routes:              - to: default                via: 10.10.10.1            nameservers:              addresses: [10.10.10.10]    version: 2\n\n中文设置sudo apt-get install language-pack-zh-hanssudo update-locale LANG=zh_CN.UTF-8sudo reboot\n\nMySQL安装dnf install mysqldnf install mysql-server\n\n启动MySQLsystemctl start mysqld\n\n设置MySQL自动启动systemctl enable --now mysqld\n\n检查MySQL是否在运行systemctl status mysqld\n输出Active：$\\color{green}{active (running)}$\n安全性配置运行mysql_secure_installation脚本，进行密码设置、允许远程连接等安全性设置。\nmysql_secure_installation\n\n设置验证密码组件\n密码等级 0\n输入两遍密码 确认是否继续使用提供的密码 y\n移除匿名用户 y\n允许root远程登陆 n\n移除test数据库 y\n重新载入权限表 y\n结束\n\n设置root用户权限从服务器登录MySQL，将root用户的host字段设为’%’，使得用户root可以从任意IP的机器上登录(若root用户的host字段为localhost,则只能本机登录)。\n\n登录MySQL\n\nmysql -uroot -p输入密码\n\n选择数据库\n\nuse mysql;\n\nhost字段(主机IP)赋值\n\nupdate user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;\n\n刷新系统权限\n\nflush privileges;\n\n验证是否设置成功\n\nselect user,host from user;\n"},{"title":"docker collabora online + wopi","url":"/note/e5a64255.html","content":"[[FastAPI WOPI Host (HTTP) 接口文档]]\n\ntoken：office.local\ndocker\n\nwopi接口代码# file_name：wopi_fastapi.py# token：office.local# 文件位置：app/files# 模板文件位置：app/templatesimport osimport iofrom fastapi import FastAPI, HTTPException, Request,Formimport shutilfrom fastapi.responses import JSONResponse, StreamingResponsefrom fastapi.middleware.cors import CORSMiddleware# -------------------------------ACCESS_TOKEN = os.getenv(&quot;ACCESS_TOKEN&quot;, &quot;office.local&quot;)FILE_DIR = os.getenv(&quot;FILE_DIR&quot;, &quot;./files&quot;)TEMPLATE_DIR = os.getenv(&quot;TEMPLATE_DIR&quot;, &quot;./templates&quot;)os.makedirs(FILE_DIR, exist_ok=True)os.makedirs(TEMPLATE_DIR, exist_ok=True)# 如果没有模板文件，可以自己放置一些到 ./templates 目录，比如空的 docx/xlsx/pptxDEFAULT_TEMPLATES = &#123;    &quot;docx&quot;: &quot;empty.docx&quot;,    &quot;xlsx&quot;: &quot;empty.xlsx&quot;,    &quot;pptx&quot;: &quot;empty.pptx&quot;&#125;app = FastAPI(title=&quot;FastAPI WOPI Host (HTTP)&quot;)app.add_middleware(    CORSMiddleware,    allow_origins=[&quot;*&quot;],  # 内网测试可全开    allow_methods=[&quot;*&quot;],    allow_headers=[&quot;*&quot;],)# -------------------------------def verify_token(token: str):    if token != ACCESS_TOKEN:        raise HTTPException(status_code=401, detail=&quot;Invalid access token&quot;)def file_path(file_id: str):    return os.path.join(FILE_DIR, file_id)def file_version(file_id: str):    path = file_path(file_id)    if os.path.exists(path):        return str(int(os.path.getmtime(path)))    return &quot;0&quot;# -------------------------------@app.get(&quot;/wopi/files/&#123;file_id&#125;&quot;)async def check_file_info(file_id: str, access_token: str):    verify_token(access_token)    path = file_path(file_id)    if not os.path.exists(path):        raise HTTPException(status_code=404, detail=&quot;File not found&quot;)    return JSONResponse(&#123;        &quot;BaseFileName&quot;: os.path.basename(path),        &quot;OwnerId&quot;: &quot;user1&quot;,        &quot;UserId&quot;: &quot;user1&quot;,        &quot;Size&quot;: os.path.getsize(path),        &quot;Version&quot;: file_version(file_id),        &quot;ReadOnly&quot;: False,        &quot;UserCanWrite&quot;: True,        &quot;SupportsUpdate&quot;: True    &#125;)@app.get(&quot;/wopi/files/&#123;file_id&#125;/contents&quot;)async def get_file(file_id: str, access_token: str):    verify_token(access_token)    path = file_path(file_id)    if not os.path.exists(path):        raise HTTPException(status_code=404, detail=&quot;File not found&quot;)    return StreamingResponse(open(path, &quot;rb&quot;), media_type=&quot;application/octet-stream&quot;)@app.post(&quot;/wopi/files/&#123;file_id&#125;/contents&quot;)async def put_file(file_id: str, request: Request, access_token: str):    verify_token(access_token)    path = file_path(file_id)    data = await request.body()    with open(path, &quot;wb&quot;) as f:        f.write(data)    return &#123;&quot;status&quot;: &quot;success&quot;, &quot;version&quot;: file_version(file_id)&#125;# -------------------------------# 新建文件接口# -------------------------------@app.post(&quot;/wopi/files/new&quot;)async def create_new_file(filetype: str = Form(...)):    &quot;&quot;&quot;    新建一个文件(docx / xlsx / pptx)    &quot;&quot;&quot;    filetype = filetype.lower()    if filetype not in DEFAULT_TEMPLATES:        raise HTTPException(status_code=400, detail=&quot;不支持的文件类型&quot;)    template_file = os.path.join(TEMPLATE_DIR, DEFAULT_TEMPLATES[filetype])    if not os.path.exists(template_file):        # 如果模板不存在，就建一个空文件        open(template_file, &quot;wb&quot;).close()    # 生成文件名    existing = [f for f in os.listdir(FILE_DIR) if f.endswith(&quot;.&quot; + filetype)]    new_name = f&quot;new_&#123;len(existing)+1&#125;.&#123;filetype&#125;&quot;    new_path = os.path.join(FILE_DIR, new_name)    # 复制模板    shutil.copyfile(template_file, new_path)    # 返回 WOPISrc URL    wopi_src = f&quot;http://192.168.0.105:8000/wopi/files/&#123;new_name&#125;&quot;  # TODO: 改成你的外部可访问地址    return JSONResponse(&#123;        &quot;filename&quot;: new_name,        &quot;url&quot;: wopi_src,        &quot;access_token&quot;: ACCESS_TOKEN    &#125;)# -------------------------------LOCKS = &#123;&#125;@app.post(&quot;/wopi/files/&#123;file_id&#125;/lock&quot;)async def lock_file(file_id: str, request: Request, access_token: str):    verify_token(access_token)    LOCKS[file_id] = True    return &#123;&quot;Lock&quot;: &quot;locked&quot;&#125;@app.post(&quot;/wopi/files/&#123;file_id&#125;/unlock&quot;)async def unlock_file(file_id: str, request: Request, access_token: str):    verify_token(access_token)    LOCKS[file_id] = False    return &#123;&quot;Lock&quot;: &quot;unlocked&quot;&#125;\nrequirements.txt# file_name：requirements.txtfastapi==0.111.1uvicorn[standard]==0.23.2python-multipart==0.0.6PyJWT==2.9.0\n构建镜像#file_name：dockerfile# 基于官方 Python 镜像FROM python:3.11-slim# 设置工作目录WORKDIR /app# 复制代码COPY wopi_fastapi.py /app/# 安装依赖RUN pip install --no-cache-dir fastapi uvicorn python-multipart# 创建文件存储目录RUN mkdir -p /app/files# 设置环境变量（非 HTTPS）ENV ACCESS_TOKEN=office.localENV FILE_DIR=/app/files# 暴露端口EXPOSE 8000# 启动 FastAPICMD [&quot;uvicorn&quot;, &quot;wopi_fastapi:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;8000&quot;, &quot;--reload&quot;]\ndocker build -t &#123;镜像名&#125; .eg：docker build -t wopi-fastapi .\n启动容器# file_name：docker-compose.yamlversion: &#x27;3.8&#x27;services:  collabora:    image: collabora/code:latest    container_name: collabora    restart: always    environment:      - extra_params=--o:ssl.enable=false    ports:      - &quot;9980:9980&quot;  wopi-server:    image: wopi-fastapi:latest    container_name: wopi    restart: always    ports:      - &quot;8000:8000&quot;    volumes:      - ../res/files:/app/files      - ../res/templates:/app/templates\ndocker-compose up -d\n","categories":["编程"],"tags":["docker","wopi","collabora"]},{"title":"java 面试题整理","url":"/note/8fe2b04b.html","content":"Java基础1. ==和equals()的区别\n==比较两个对象的引用是否指向同一个内存地址（基本数据类型比较值）\nequals()是Object类的方法，默认实现与==相同，但通常被重写用于比较对象的内容\n\n2. String、StringBuilder和StringBuffer的区别\nString：不可变字符序列，线程安全\nStringBuilder：可变字符序列，非线程安全，性能高\nStringBuffer：可变字符序列，线程安全（方法加synchronized），性能稍低\n\n3. final关键字的作用\nfinal变量：常量，只能赋值一次\nfinal方法：不能被子类重写\nfinal类：不能被继承\n\n4. 面向对象的三大特性\n封装：隐藏内部实现，提供公共访问方式\n继承：子类继承父类特征和行为\n多态：同一操作作用于不同对象，产生不同结果\n\n5. 抽象类和接口的区别\n\n\n特性\n抽象类\n接口\n\n\n\n方法\n可以有具体方法\nJava8前只能是抽象方法\n\n\n变量\n无限制\n默认public static final\n\n\n实现\n单继承\n多实现\n\n\n构造器\n可以有\n不能有\n\n\n设计目的\n代码复用\n定义规范\n\n\n6. 重载(Overload)和重写(Override)的区别\n重载：同一类中，方法名相同但参数不同（类型、数量、顺序）\n重写：子类中，方法名、参数列表与父类相同，覆盖父类实现\n\n7. ArrayList和LinkedList的区别\n\n\n特性\nArrayList\nLinkedList\n\n\n\n底层\n动态数组\n双向链表\n\n\n随机访问\nO(1)\nO(n)\n\n\n插入删除\nO(n)\nO(1)\n\n\n空间\n预留空间\n每个元素额外空间\n\n\n8. HashMap的工作原理\n基于哈希表实现，使用数组+链表+红黑树（JDK8）\n通过key的hashCode计算数组下标\n解决哈希冲突：链表法，当链表长度&gt;8时转为红黑树\n扩容机制：默认负载因子0.75，扩容为原容量2倍\n\n9. 创建线程的几种方式\n继承Thread类\n实现Runnable接口\n实现Callable接口（可返回结果）\n使用线程池（Executor框架）\n\n10. volatile关键字的作用\n保证变量的可见性：一个线程修改后立即对其他线程可见\n禁止指令重排序：防止JVM优化导致执行顺序改变\n不保证原子性（如i++操作仍需同步）\n\nJVM1. Java内存区域划分\n程序计数器：线程私有，当前线程执行的字节码行号\n虚拟机栈：线程私有，存储栈帧（局部变量表、操作数栈等）\n本地方法栈：为Native方法服务\n堆：线程共享，存放对象实例\n方法区：线程共享，存储类信息、常量、静态变量等\n\n2. 垃圾回收算法有哪些\n标记-清除：标记无用对象后清除，会产生内存碎片\n复制算法：将内存分为两块，存活对象复制到另一块\n标记-整理：标记后让存活对象向一端移动\n分代收集：新生代(复制算法)、老年代(标记-清除&#x2F;整理)\n\n3. 类加载过程\n加载：获取类的二进制字节流\n验证：确保Class文件符合规范\n准备：为静态变量分配内存并设置默认值\n解析：将符号引用转为直接引用\n初始化：执行类构造器&lt;clinit&gt;()方法\n\n","categories":["java"],"tags":["面试题","java"]},{"title":"maven打包","url":"/note/780af030.html","content":"分环境打包&lt;build&gt;  &lt;!-- 指定配置文件--&gt;  &lt;finalName&gt;HIS&lt;/finalName&gt;  &lt;resources&gt;    &lt;resource&gt;      &lt;directory&gt;src/main/resources&lt;/directory&gt;      &lt;!-- 资源根目录排除各环境的配置，防止在生成目录中多余其它目录 --&gt;      &lt;filtering&gt;true&lt;/filtering&gt;      &lt;excludes&gt;        &lt;exclude&gt;dev/*&lt;/exclude&gt;        &lt;exclude&gt;pro/*&lt;/exclude&gt;      &lt;/excludes&gt;    &lt;/resource&gt;    &lt;resource&gt;      &lt;directory&gt;src/main/resources/$&#123;profiles.active&#125;&lt;/directory&gt;    &lt;/resource&gt;  &lt;/resources&gt;&lt;/build&gt;&lt;profiles&gt;  &lt;profile&gt;    &lt;!-- 本地开发环境 --&gt;    &lt;id&gt;dev&lt;/id&gt;    &lt;properties&gt;      &lt;!-- 这里的标签名会和resourse进行拼接 --&gt;      &lt;profiles.active&gt;dev&lt;/profiles.active&gt;    &lt;/properties&gt;    &lt;!-- 这里配置为默认选项 --&gt;    &lt;activation&gt;      &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;    &lt;/activation&gt;  &lt;/profile&gt;  &lt;profile&gt;    &lt;!-- 生产环境 --&gt;    &lt;id&gt;pro&lt;/id&gt;    &lt;properties&gt;      &lt;profiles.active&gt;pro&lt;/profiles.active&gt;    &lt;/properties&gt;  &lt;/profile&gt;&lt;/profiles&gt;\n\njar包 （包含依赖）&lt;build&gt;  &lt;plugins&gt;    &lt;plugin&gt;      &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;      &lt;executions&gt;        &lt;execution&gt;          &lt;phase&gt;package&lt;/phase&gt;          &lt;goals&gt;            &lt;goal&gt;single&lt;/goal&gt;          &lt;/goals&gt;        &lt;/execution&gt;      &lt;/executions&gt;      &lt;configuration&gt;        &lt;descriptorRefs&gt;          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;        &lt;/descriptorRefs&gt;        &lt;archive&gt;          &lt;manifest&gt;            &lt;mainClass&gt;Main&lt;/mainClass&gt;          &lt;/manifest&gt;        &lt;/archive&gt;      &lt;/configuration&gt;    &lt;/plugin&gt;  &lt;/plugins&gt;&lt;/build&gt;\n","categories":["编程"],"tags":["maven"]},{"title":"nacos","url":"/note/2428cc0.html","content":"# 单机模式启动startup.cmd -m standalone\n","categories":["编程"],"tags":["SpringCloud"]},{"title":"obsidian CSS片段","url":"/note/3ed94a36.html","content":"状态栏居中/* 状态栏居中 */div.status-bar &#123;    --status-bar-position: absolute;    right: 0;    left: 0;    width: fit-content;    padding: 6px var(--size-4-2);    margin: 0 auto;    background: var(--background-secondary-blur);    border: 1px solid var(--window-border-color);    border-radius: var(--radius-s);&#125;\n\n自动隐藏侧边栏.sidebar-toggle-button.mod-left &#123;    justify-content: right; /*交互区对齐*/    margin-left: -28px; /*左侧栏按钮位置*/&#125;.sidebar-toggle-button.mod-left svg &#123;    opacity: 0; /*左侧栏按钮 SVG 不透明度*/&#125;.workspace-ribbon.side-dock-ribbon.mod-left:not(:hover)::before,.workspace-ribbon.side-dock-ribbon.mod-left:not(:hover) &#123;    border-right-color: transparent;    margin-left: -32px;&#125;.workspace-ribbon.side-dock-ribbon.mod-left::before,.workspace-ribbon.side-dock-ribbon.mod-left &#123;    transition: var(--anim-duration-moderate);&#125;\n"},{"title":"openwrt","url":"/note/7a44463a.html","content":"换源# openwrt 官方源src/gz openwrt_core https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/packagessrc/gz openwrt_base https://downloads.openwrt.org/releases/23.05.3/packages/x86_64/basesrc/gz openwrt_luci https://downloads.openwrt.org/releases/23.05.3/packages/x86_64/lucisrc/gz openwrt_packages https://downloads.openwrt.org/releases/23.05.3/packages/x86_64/packagessrc/gz openwrt_routing https://downloads.openwrt.org/releases/23.05.3/packages/x86_64/routingsrc/gz openwrt_telephony https://downloads.openwrt.org/releases/23.05.3/packages/x86_64/telephony# 清华源src/gz openwrt_core https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/23.05.3/targets/x86/64/packagessrc/gz openwrt_base https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/23.05.3/packages/x86_64/basesrc/gz openwrt_luci https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/23.05.3/packages/x86_64/lucisrc/gz openwrt_packages https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/23.05.3/packages/x86_64/packagessrc/gz openwrt_routing https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/23.05.3/packages/x86_64/routingsrc/gz openwrt_telephony https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/23.05.3/packages/x86_64/telephony# kenzok8src/gz kenzok8 https://op.dllkids.xyz/packages/x86_64# 中科大sed -i &#x27;s/downloads.openwrt.org/mirrors.ustc.edu.cn\\/openwrt/g&#x27; /etc/opkg/distfeeds.conf\n\nmodule ‘luci.cbi’ not foundopkg updateopkg install luci luci-base luci-compat\n\n扩容空间cfdisk /dev/nvme0n1mkfs.ext4 /dev/nvme0n1p3/dev/sda3opkg install block-mountmkdir -p /tmp/introotmkdir -p /tmp/extrootmount --bind / /tmp/introotmount /dev/sda3 /tmp/extroottar -C /tmp/introot -cvf - . | tar -C /tmp/extroot -xf -umount /tmp/introotumount /tmp/extroot\n\nno field package.preload[‘luci.cbi’]opkg install luci luci-base luci-compat\n"},{"title":"pve","url":"/note/ef0dfae5.html","content":"转换 ISOqm importdisk 100 /var/lib/vz/template/iso/openwrt-23.05.4-x86-64-generic-ext4-combined-efi.img local-lvm\n\nPVE 美化wget -q -O /root/pve_source.tar.gz &#x27;https://bbs.x86pi.cn/file/topic/2023-11-28/file/01ac88d7d2b840cb88c15cb5e19d4305b2.gz&#x27; &amp;&amp; tar zxvf /root/pve_source.tar.gz &amp;&amp; /root/./pve_source\n"},{"title":"tomcat 启用log4j","url":"/note/1569dc91.html","content":"tomcat 安装目录 lib文件夹增加jar包与配置文件jar包https://mvnrepository.com/artifact/log4j/log4j\n配置文件### 设置 ###log4j.rootLogger=info,stdout,D,E### 输出信息到控制抬 ###log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target=System.outlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; method:%l%n%m%n### 输出DEBUG 级别以上的日志到=logs/error.log ###log4j.appender.D=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.DatePattern=&#x27;-&#x27;yyyy-MM-dd&#x27;.log&#x27;log4j.appender.D.File=路径/info.loglog4j.appender.D.encoding=UTF-8log4j.appender.D.File.encoding=UTF-8log4j.appender.D.Append=truelog4j.appender.D.Threshold=DEBUGlog4j.appender.D.filter.filterName=org.apache.log4j.varia.LevelRangeFilterlog4j.appender.D.filter.filterName.LevelMin=INFOlog4j.appender.D.filter.filterName.LevelMax=INFOlog4j.appender.D.layout=org.apache.log4j.PatternLayoutlog4j.appender.D.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %F ] - [ %p ]  %n%m%n%n### 输出ERROR 级别以上的日志到=logs/error.log ###log4j.appender.E=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.DatePattern=&#x27;-&#x27;yyyy-MM-dd&#x27;.log&#x27;log4j.appender.E.File=路径/error.loglog4j.appender.E.File.encoding=UTF-8log4j.appender.E.encoding=UTF-8log4j.appender.E.Append=truelog4j.appender.E.Threshold=ERRORlog4j.appender.E.filter.filterName=org.apache.log4j.varia.LevelRangeFilterlog4j.appender.E.filter.filterName.LevelMin=ERRORlog4j.appender.E.filter.filterName.LevelMax=ERRORlog4j.appender.E.layout=org.apache.log4j.PatternLayoutlog4j.appender.E.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %F ] - [ %p ]  %n%m%n%n\n\ngroovy 代码import org.apache.log4j.Categoryimport org.apache.log4j.Loggerlog.info()\n"},{"title":"vb代码相关","url":"/note/cc70b376.html","content":"httpGetPrivate Function HttpGet(ByVal URL As String) As String    On Error GoTo errormsg    Dim HTTP As MSXML2.ServerXMLHTTP    Set HTTP = CreateObject(&quot;Msxml2.ServerXMLHTTP.6.0&quot;)    HTTP.Open &quot;GET&quot;, URL, False    HTTP.send    If HTTP.Status = 200 Then        HttpGet = HTTP.responseText    Else        HttpGet = &quot;推送出错:&quot; &amp; HTTP.Status    End Iferrormsg:    HttpGet = &quot;推送出错，请重试！&quot;End Function\n\nhttpPostFunction HttpPost(Url As String, PostMsg As String) As String    On Error GoTo er    Dim XMLHTTP As Object    Set XMLHTTP = CreateObject(&quot;Msxml2.XMLHTTP&quot;)    If Not IsObject(XMLHTTP) Then        Set XMLHTTP = CreateObject(&quot;Microsoft.XMLHTTP&quot;)        If Not IsObject(XMLHTTP) Then Exit Function    End If    XMLHTTP.Open &quot;POST&quot;, Url, False    XMLHTTP.SetRequestHeader &quot;CONTENT-TYPE&quot;, &quot;application/json&quot;    &#x27;XMLHTTP.send PostMsg&#x27;    XMLHTTP.send UTF8EncodeURI(PostMsg)    XMLHTTP.send PostMsg    Do While XMLHTTP.ReadyState &lt;&gt; 4        DoEvents    Loop    If XMLHTTP.Status = 200 Then        HttpPost = XMLHTTP.ResponseText    Else        HttpPost = &quot;400&quot;    End If    Exit Functioner:&#x27;        MsgBox &quot;POST false&quot;    HttpPost = &quot;false&quot;End Function\n"},{"title":"vue笔记","url":"/note/882edeea.html","content":"第一章 Vue核心\n第二章 Vue组件化编程\n第三章 使用Vue脚手架\n第四章 Vue中的ajax\n第五章 vuex\n第七章 Vue UI组件库\n第六章 vue-router\n脚手架文件结构：（markdown编写文件目录）|-- node_modules|-- public        |-- favicon.ico： 页签图标        |-- index.html：  主页面|-- src    |-- assets： 存放静态资源    |   |-- logo.png    |-- components: 存放组件    |   |-- HelloWorld.vue    |-- App.vue:  汇总所有组件    |-- main.js:  入口文件|-- .gitignore: git版本管制忽略的配置|-- babel.config.js： babel的配置文件|-- package.json：  应用包配置文件|-- README.md：  应用描述文件|-- package-lock.json  包版本控制文件\n\n关于不同版本的Vue：1.vue.js与vue.runtime.xx.js的区别\n    (1).vue.js是完整版的Vue，包含：核心功能+模板解析器\n    (2).vue.runtime.xx.js 是运行版的vue，只包含：核心功能，没有模板解析器\n2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用\n  render函数收到的createElement 去指定具体内容\n\nvue.config.js配置文件\n使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置使用vue.config.js可以对脚手架进行个性化定制，详情： https://cli.vuejs.org/zh/config/#lintonsave\n\nref属性1.被用来给元素或子组件注册引用信息（id的替代者）\n2.应用在html标签上获取的是真实的DOM元素，应用在组件标签上是组件实例对象（vc）\n3.使用方式：\n    打标识： &lt;h1 ref=&quot;xxx&quot;&gt;...&lt;/h1&gt;  或 &lt;School ref=&quot;xxx&quot;/&gt;\n    获取： this.$refs.xxx\n\n配置项props功能：让组件接收外部传过来的数据(props传来的优先级高于默认)\n     默认值优先级高 ，与props同名时会提示报错修改默认值name\n(1). 传递数据：\n      &lt;Demo name=&quot;xxx&quot; /&gt;\n(2). 接收数据：\n     第一种方式（只接收）：\n        props:[&#39;name&#39;]\n     第二种方式（限制类型）：\n     props:&#123;\n        name:String\n     &#125;\n     第三种方式（限制类型、限制必要性、指定默认值）：\n     props:&#123;\n        name:&#123;\n            type:String,//类型\n            required:true,//必要性\n            default:&#39;老王&#39; //默认值\n        &#125;\n     &#125;\n父组件传子组件 父组件传来的不允许改变 ，非要改在子组件 通过data 增加一个中间属性\n（如果子组件是传来的年龄属性 加1 记得v-bind: 单项绑定）\n备注：props是只读的，Vue底层会检测你对props的修改，如果进行了修改，就会发出警告，\n     若业务需求确实需要修改，那么请复制props的内容到data中一份 ,\n\n       data() &#123;\n            return &#123;\n                myAge:this.age\n             &#125;\n        &#125;\n\n\n     然后去修改data中的数据myAge\n\nmixin(混入)功能：可以把多个组件共用的配置提取成一个混入对象\n使用方式：\n    第一步定义混合，例如：\n        export const a = &#123;\n            data()&#123;...&#125;,\n            methods:&#123;...&#125;\n            ...\n\n        &#125;\n    第二步使用混入，例如：\n       (1).全局混入：Vue.mixin(xxx)\n       (2).局部混入：mixins:[&#39;xxx&#39;]\n\n插件功能：用于增强Vue本质：包含install方法的一个对象MyPlugin，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。\n      定义插件：\n      对象.install = function (Vue,options)&#123;\n      //1.添加全局过滤器\n      Vue.filter(..)\n\n      //2.添加全局指令\n      Vue.directive(..)\n      //3.配合全局混入（合）\n      Vue.mixin(..)\n\n      //4.添加实例方法\n      Vue.prototype.$myMethod = function () &#123;...&#125;\n      Vue.prototype.$myProperty = xxx\n    &#125;\n  使用插件： Vue.use()\n\nVue运行顺序（解析顺序）1.先引入js 2.读取配置项 3.解析模板\nscoped 样式作用：让样式在局部生效，防止冲突写法: \n总结TodoList案例\n组件化编码流程：(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突(2).实现动态组件：考虑好数据的存放位置，数据是一个组件再用，还是一些组件在用：\n 1).一个组件在用：放在组件自身即可     2).一些组件再用：放在他们共同的父组件上，（状态提升）\n (3).实现交互：从绑定事件开始\n\nprops适用于：(1) .父组件 &#x3D;&#x3D;&gt; 子组件通信\n (2). 子组件 &#x3D;&#x3D;&gt; 父组件通信 （要求父先给字一个函数）\n\n使用v-model时要切记： v-model绑定的值不能是props传过来的值，因为props是不可以修改的！\n\nprops传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做\n\n\nwebStorage1.存储内容大小一般支持5MB左右（不同浏览器可能还不一样）\n2.浏览器端通过 window.sessionStorage和window.localStorage属性来实现本地存储机制.\n3.相关API:\n\nxxxStorage.setItem(‘key’,’value’);\n\n该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。\n2.xxxStorage.getItem(‘person’);\n该方法接收一个键名作为参数，返回键名对应的值。\n3.xxxStorage.removeItem(‘person’);\n该方法接收一个键名作为参数，并把该键名从存储中删除。\n\nxxxStorage.clear()\n\n该方法会清空存储中的所有数据\n\n备注\n\nSessionStorage存储的内容会随着浏览器窗口关闭而消失\nLocalStorage存储的内容,需要手动清除才会消失\nxxxStorage.getItem(xxx)如果xxx对应的value获取不到，那么getItem的返回值是null\nJSON.parse(null)的结果依然是null\n\n\n\n组件的自定义事件\n一种组件间的方式，适用于： 子组件 &#x3D;&#x3D;&gt; 父组件\n\n使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件 （事件的回调在A中）\n\n绑定自定义事件：\n 1.第一种，在父组件中：&lt;Demo @mxh=&quot;test&quot; /&gt;   或&lt;Demo v-on:mxh=&quot;test&quot; /&gt;\n 2.第二种，在父组件中：\n &lt;Demo ref=&quot;demo&quot;/&gt;.....mounted()&#123;this.$refs.demo.$on(&#x27;mxh&#x27;,this.test)&#125;\n\n 3.若想让自定义事件只能触发一次，可以使用1中用 once修饰符，2中用$once方法\n\n触发自定义事件：this.$emit(&#39;mxh&#39;,数据)\n\n解绑自定义事件：this.$off(&#39;mxh&#39;)\n\n组件上也可以绑定原生DOM事件，需要使用native修饰符 &lt;Student @click.native=&quot;show&quot;/&gt;\n\n注意：通过this.$refs.xxx.$on(&#39;mxh&#39;,回调)绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！\n\n\n全局事件总线（GlobalEventBus）【本质是组件自定义事件】1.一种组件间通信的方式，适用于 任意组件间通信.2.在main.js 安装全局事件总线：new Vue(&#123;...    beforeCreate()&#123;        Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm    &#125;...&#125;)\n\n3.使用事件总线：1.接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。定义this.$bus.$on和this.$bus.$off\nmethods:&#123;    demo(data)&#123;...&#125;&#125;mounted()&#123;    this.$bus.$on(&#x27;xxx&#x27;,this.demo)&#125;beforeDestroy() &#123;    this.$bus.$off(&#x27;xxx&#x27;)&#125;\n\n2.提供（发送）数据：定义this.$bus.$emit(&#39;xxx&#39;,数据)\nmethods: &#123;    sendStudentName()&#123;        this.$bus.$emit(&#x27;xxx&#x27;,this.name)    &#125;&#125;\n\n4.最好在beforeDestroy勾子中，用$off去解绑 当前组件所用到的事件。解绑       this.$bus.$off(&#39;xxx&#39;)\n消息订阅与发布（pubsub）1.一种组件间通信方式，适用于 任意组件间通信.2.使用步骤：1.安装pubsub：npm i pubsub-js\n2.引入：import pubsub from &#39;pubsub-js&#39;\n3.订阅消息（接收数据）：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。\nmethods()&#123;    demo(data)&#123;...&#125;&#125;.....mounted()&#123;    this.pid = pubsub.subscribe(&#x27;xx消息名&#x27;,this.demo)//订阅消息&#125;beforeDestroy() &#123;    pubsub.unsubscribe(pid)//取消订阅&#125;\n\n4.发布消息（提供数据）：pubsub.publish(&#39;xxx消息名&#39;,数据)\nmethods:&#123;     sendStudentName()&#123;       pubsub.publish(&#x27;xxx消息名字&#x27;,&#x27;666&#x27;)//发布消息名     &#125;   &#125;\n\n5.最好在beforeDestroy勾子中，用pubsub.unsubscribe(pid) 去 取消订阅.\nnextTick 重要！！！！！1.语法：this.$nextTick(回调函数)\n&lt;input       type=&quot;text&quot;       v-show=&quot;todo.isEdit&quot;       :value=&quot;todo.title&quot;       @blur=&quot;handleBlur(todo, $event)&quot;       ref=&quot;inputTitle&quot; /&gt;  方法名() &#123;     this.$nextTick(function () &#123;       this.$refs.inputTitle.focus();     &#125;);  &#125;\n\n2.作用：在下一次DOM更新结束后执行其指定的回调\n3.什么时候用：当改变数据后，要基于更新后的DOM进行某些操作时【新输入框获取焦点】，要在nextTick所指定的回调函数中执行。\n插槽1.作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于父组件&#x3D;&#x3D;&#x3D;&gt;子组件。\n2.分类：默认插槽、具名插槽、作用域插槽\n3.使用方式：\n1.默认插槽父组件中：        &lt;Category&gt;              &lt;div&gt; html结构1 &lt;/div&gt;       &lt;/Category&gt;子组件中：       &lt;template&gt;            &lt;div&gt;           &lt;!-- 定义插槽 --&gt;                 &lt;slot&gt;插槽默认内容&lt;/slot&gt;             &lt;/div&gt;       &lt;/template&gt;\n\n2.具名插槽父组件中    &lt;Category&gt;       &lt;template slot=&quot;center&quot;&gt;              &lt;div&gt; html结构1 &lt;/div&gt;       &lt;/template&gt;      &lt;template v-slot:&quot;footer&quot;&gt;              &lt;div&gt; html结构2 &lt;/div&gt;       &lt;/template&gt;   &lt;/Category&gt;子组件中   &lt;template&gt;      &lt;div&gt;           &lt;!-- 定义插槽 --&gt;          &lt;slot name=&quot;center&quot;&gt;插槽默认内容。。&lt;/slot&gt;          &lt;slot name=&quot;footer&quot;&gt;插槽默认内容。。&lt;/slot&gt;      &lt;/div&gt;   &lt;/template&gt;\n\n3. 作用域插槽1.理解：数组在组件的自身，但根据数据生成的结构需要组件的使用者来决定。\n（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定)             2.具体编码：\n父组件中 &lt;Category &gt;      &lt;template scope=&quot;mxh&quot;&gt;        &lt;!-- 生成ul列表 --&gt;        &lt;ul&gt;          &lt;li v-for=&quot;(item, index) in mxh.games&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;        &lt;/ul&gt;      &lt;/template&gt;  &lt;/Category&gt;   &lt;Category &gt;      &lt;template slot-scope=&quot;&#123;games&#125;&quot;&gt; &lt;!-- 解构赋值 --&gt;         &lt;!-- 生成ul列表 --&gt;        &lt;h4 v-for=&quot;(item, index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/h4&gt;      &lt;/template&gt;    &lt;/Category&gt;子组件中&lt;template&gt;  &lt;div&gt;    &lt;!-- 定义一个插槽(挖个坑，等着组件的使用者进行填充) --&gt;   &lt;slot :games=&quot;games&quot; &gt;我是默认的一些内容&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &quot;Category&quot;,  props:[&#x27;title&#x27;], //数据在子组件自身  data() &#123;    return &#123;      games: [&quot;红色警戒&quot;, &quot;超级玛丽&quot;, &quot;飞车&quot;, &quot;选五&quot;],    &#125;;  &#125;,&#125;;&lt;/script&gt;\n\nVuex1. 概念在Vue中实现集中式状态（数据）管理的一个Vue插件，对Vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。\n2. 何时使用？多个组件需要共享数据时\n3. 搭建vuex环境\nnpm i vuex  注意！！！【vue2 是vuex3 ，vue3是vuex4】\n\n安装指定版本 npm i vuex@3\n2.创建文件：src/store/index.js\n//引入Vue核心库\nimport Vue from &#39;vue&#39;\n//引入Vuex\nimport Vuex from &#39;vuex&#39;\n//应用Vuex插件\nVue.use(Vuex)\n\n//准备actions——用于响应组件中的动作\nconst actions = &#123;&#125;\n//准备mutation——用于操作数据(state)\nconst mutations = &#123;&#125;\n//准备state——用于存储数据\nconst state = &#123;&#125;\n\n//创建store并暴露（导出）store\nexport default new Vuex.Store(&#123;\n   actions,\n   mutations,\n   state,\n\n&#125;)\n\n3.在main.js中创建vm时传入store配置项\n注意！！！main.js 执行顺序会先执行import 引入 ，在执行console.log等，和代码顺序无关\n....//引入storeimpor store from &#x27;./store&#x27;....//创建vm new Vue(&#123;    el:&#x27;#app&#x27;,    render: h =&gt; h(App),    store,&#125;)\n\n4. 基本使用1.初始化数据、配置actions、配置mutations，操作文件index.js\n//引入Vue核心库import Vue from &#x27;vue&#x27;//引入Vueximport Vuex from &#x27;vuex&#x27;//应用Vuex插件Vue.use(Vuex)//准备actions——用于响应组件中的动作const actions = &#123;    //响应组件中加的动作    jia(context, value) &#123;        // console.log(&#x27;actions中的jia被调用了&#x27;,context,value);        context.commit(&#x27;JIA&#x27;, value)    &#125;,&#125;//准备mutation——用于操作数据(state)const mutations = &#123;    //执行加    JIA(state, value) &#123;        //   console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)        state.sum += value    &#125;,&#125;//准备state——用于存储数据const state = &#123;    sum: 0, //当前的和&#125;//创建store并暴露（导出）storeexport default new Vuex.Store(&#123;    actions,    mutations,    state,&#125;)//\n\n2.组件中读取vuex中的数据：$store.state.sum\n3.组件中修改vuex中的数据：$store.dispatch(&#39;action中的方法名&#39;,数据) 或 $store.commit(&#39;mutations中的方法名&#39;,数据)\n备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch，直接写commit\n5. getters使用1.概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。\n2.在index.js中追加getters配置\n...const getters = &#123;    bigSum(state)&#123;        return state.sum*10    &#125;&#125;//创建store并暴露（导出）storeexport default new Vuex.Store(&#123;   ...,   getters&#125;)\n\n3.组件中读取数据： $store.getters.bigSum\n6. 四个map方法的使用1.mapState方法：用于帮助我们映射state中的数据为计算属性\ncomputed:&#123;  //借助mapState生成计算属性，从state中读取数据。（对象写法）  //  ...mapState(&#123;sum:&#x27;sum&#x27;,school:&#x27;school&#x27;,subject:&#x27;subject&#x27;&#125;),  //借助mapState生成计算属性，从state中读取数据。（数组写法）  ...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;]),&#125;\n\n2.mapGetters方法：用于帮助我们映射getters中的数据为计算属性\ncomputed:&#123;&#125;\n"},{"title":"win相关","url":"/note/a802f1a7.html","content":"winget 彩虹进度条# winget settings&#123;    &quot;visual&quot;: &#123;        &quot;progressBar&quot;: &quot;rainbow&quot;    &#125;&#125;\n\nwin11右键菜单修改win10样式# cmdreg.exe add &quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\\InprocServer32&quot; /f /ve# win11reg.exe delete &quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\\InprocServer32&quot; /va /f\n\nwin终端 ssh# .ssh 目录新建文件config# 保持心跳Host *    ServerAliveInterval 40# 别名登录Host txy    HostName ip    User root  \tPort 22    IdentityFile ~/.ssh/OpenCloudOS.pem\n"}]